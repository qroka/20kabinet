const express = require('express');
const axios = require('axios');

const app = express();
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const BOT_TOKEN = '8306314985:AAEe9DmmVGqpXSk_uhiPA1YA8u2ysYu9usY';
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'https://sokral-design.ru/webhook';
const FRONTEND_URL = process.env.FRONTEND_URL || 'https://sokral-design.ru'; // URL –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authTokens = new Map();

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ webhook (–∏—Å–ø–æ–ª—å–∑—É–µ–º polling)
async function deleteWebhook() {
  try {
    const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`);
    console.log('Webhook –æ—Ç–∫–ª—é—á–µ–Ω:', response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è webhook:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
function generateAuthToken() {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendMessage(chatId, text, replyMarkup = null) {
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      reply_markup: replyMarkup
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function handleCommand(chatId, message) {
  const command = message.text;

  switch (command) {
    case '/start':
      await sendMessage(chatId, `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞!</b>

–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
      `, {
        inline_keyboard: [[
          {
            text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
            callback_data: 'auth_request'
          }
        ]]
      });
      break;

    case '/help':
      await sendMessage(chatId, `
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/auth - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ /auth –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
2. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É
      `);
      break;

    case '/auth':
      await handleAuthRequest(chatId);
      break;

    default:
      await sendMessage(chatId, `
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
      `);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function handleAuthRequest(chatId) {
  const authToken = generateAuthToken();
  const authUrl = `${FRONTEND_URL}/auth?token=${authToken}&chatId=${chatId}`;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç
  authTokens.set(authToken, {
    chatId: chatId,
    timestamp: Date.now(),
    used: false
  });

  await sendMessage(chatId, `
‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>

üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b>
<a href="${authUrl}">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞</a>

‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ
2. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
3. –ï—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä

‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!
  `, {
    inline_keyboard: [[
      {
        text: 'üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É',
        callback_data: 'auth_request'
      }
    ]]
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  switch (data) {
    case 'auth_request':
      await handleAuthRequest(chatId);
      break;
  }

  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
      callback_query_id: callbackQuery.id
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function validateAuthToken(token, chatId) {
  const authData = authTokens.get(token);
  
  if (!authData) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (10 –º–∏–Ω—É—Ç)
  if (Date.now() - authData.timestamp > 10 * 60 * 1000) {
    authTokens.delete(token);
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏ chatId —Å–æ–≤–ø–∞–¥–∞–µ—Ç
  if (authData.used || authData.chatId !== chatId) {
    return false;
  }

  return true;
}

// –û—Ç–º–µ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
function markTokenAsUsed(token) {
  const authData = authTokens.get(token);
  if (authData) {
    authData.used = true;
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
function cleanupOldTokens() {
  const now = Date.now();
  for (const [token, data] of authTokens.entries()) {
    if (now - data.timestamp > 10 * 60 * 1000) {
      authTokens.delete(token);
    }
  }
}

// Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;

    if (update.message) {
      const chatId = update.message.chat.id;
      const message = update.message;

      if (message.text && message.text.startsWith('/')) {
        await handleCommand(chatId, message);
      }
    }

    if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }

    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).send('Error');
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/api/validate-auth/:token/:chatId', (req, res) => {
  const { token, chatId } = req.params;
  const isValid = validateAuthToken(token, chatId);
  
  if (isValid) {
    markTokenAsUsed(token);
    res.json({ valid: true, chatId: chatId });
  } else {
    res.status(400).json({ valid: false, error: 'Invalid or expired token' });
  }
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post('/api/notify-user/:chatId', async (req, res) => {
  const { chatId } = req.params;
  const { message } = req.body;

  try {
    await sendMessage(chatId, message);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
let lastUpdateId = 0;

async function getUpdates() {
  try {
    const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`, {
      offset: lastUpdateId + 1,
      timeout: 30
    });
    
    if (response.data.ok && response.data.result.length > 0) {
      for (const update of response.data.result) {
        lastUpdateId = update.update_id;
        
        if (update.message) {
          const chatId = update.message.chat.id;
          const message = update.message;
          
          if (message.text && message.text.startsWith('/')) {
            await handleCommand(chatId, message);
          }
        }
        
        if (update.callback_query) {
          await handleCallbackQuery(update.callback_query);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3002;
app.listen(PORT, () => {
  console.log(`ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –û—Ç–∫–ª—é—á–∞–µ–º webhook –∏ –≤–∫–ª—é—á–∞–µ–º polling
  deleteWebhook();
  
  // –ù–∞—á–∏–Ω–∞–µ–º polling
  setInterval(getUpdates, 1000);
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(cleanupOldTokens, 5 * 60 * 1000);
  
  console.log('üì° Polling –≤–∫–ª—é—á–µ–Ω - –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  validateAuthToken,
  markTokenAsUsed,
  sendMessage
};
